name: Deploy to Production (Self-Hosted Runner)

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  APP_DIR: /var/www/shpion-z0r

jobs:
  build-and-deploy:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend Docker image
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-backend

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for Frontend Docker image
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-frontend

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          build-args: |
            REACT_APP_API_URL=${{ vars.REACT_APP_API_URL }}
            REACT_APP_LIVEKIT_URL=${{ vars.REACT_APP_LIVEKIT_URL }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy Services on Server
        run: |
          echo "Ensuring project directory exists: ${{ env.APP_DIR }}"
          mkdir -p ${{ env.APP_DIR }}
          cd ${{ env.APP_DIR }}

          echo "Creating backend production environment file..."
          cat << EOF > backend-prod.env
          # Database Connection for Backend Service
          DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}?schema=public

          # Database Credentials for DB Service Initialization
          POSTGRES_USER=${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB=${{ secrets.POSTGRES_DB }}

          # App Secrets
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          LIVEKIT_URL=${{ secrets.LIVEKIT_URL }}
          LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }}
          LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}
          CLIENT_URL=${{ vars.REACT_APP_API_URL }}
          PORT=3001
          NODE_ENV=production
          EOF
          
          echo "Copying docker-compose file from repository checkout..."
          cp ${{ github.workspace }}/docker-compose.prod.yml .

          echo "Pulling latest images from GHCR..."
          docker-compose -f docker-compose.prod.yml pull

          echo "Restarting services with new images..."
          docker-compose -f docker-compose.prod.yml up -d

          echo "Cleaning up unused docker images..."
          docker image prune -af 