name: CI/CD Deploy

on:
  push:
    branches:
      - master

# Shared environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}
  BACKEND_IMAGE: ghcr.io/${{ github.repository_owner }}/shpion-backend
  FRONTEND_IMAGE: ghcr.io/${{ github.repository_owner }}/shpion-frontend

jobs:
  build-and-push:
    name: Build & Push Docker Images
    runs-on: ubuntu-latest

    permissions:
      contents: read        # to checkout the code
      packages: write       # to push images to GHCR

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU (multi-arch builds)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          push: true
          tags: ${{ env.BACKEND_IMAGE }}:latest
          platforms: linux/amd64

      - name: Build & push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: true
          tags: ${{ env.FRONTEND_IMAGE }}:latest
          platforms: linux/amd64
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_LIVEKIT_URL=${{ secrets.VITE_LIVEKIT_URL }}

  deploy:
    name: Deploy to VPS
    runs-on: ubuntu-latest
    needs: build-and-push
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVER_WORKDIR: ${{ secrets.SERVER_WORKDIR }}
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      LIVEKIT_URL: ${{ secrets.LIVEKIT_URL }}
      LIVEKIT_API_KEY: ${{ secrets.LIVEKIT_API_KEY }}
      LIVEKIT_API_SECRET: ${{ secrets.LIVEKIT_API_SECRET }}
      CLIENT_URL: ${{ secrets.CLIENT_URL }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}

    steps:
      - name: Checkout repository (compose files)
        uses: actions/checkout@v4

      - name: Run deployment script on server over SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          envs: GITHUB_TOKEN,DATABASE_URL,JWT_SECRET,LIVEKIT_URL,LIVEKIT_API_KEY,LIVEKIT_API_SECRET,CLIENT_URL,REGISTRY,IMAGE_OWNER,SERVER_WORKDIR,POSTGRES_USER,POSTGRES_PASSWORD,POSTGRES_DB
          script: |
            set -e
            export REGISTRY=${{ env.REGISTRY }}
            export IMAGE_OWNER=${{ env.IMAGE_OWNER }}
            docker login $REGISTRY -u ${{ github.actor }} -p $GITHUB_TOKEN

            # Ensure we can write inside workdir
            if [ -d "$SERVER_WORKDIR" ]; then
              sudo chown -R $(whoami) "$SERVER_WORKDIR" || true
            fi

            # Clone or update project repository
            if [ ! -d "$SERVER_WORKDIR/.git" ]; then
              (rm -rf "$SERVER_WORKDIR" || sudo rm -rf "$SERVER_WORKDIR")
              git clone https://github.com/${{ github.repository }} "$SERVER_WORKDIR"
            fi

            cd "$SERVER_WORKDIR"

            git pull --ff-only

            # Build DATABASE_URL if not provided
            if [ -z "$DATABASE_URL" ]; then
              export DATABASE_URL="postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@db:5432/$POSTGRES_DB?schema=public"
            fi

            # --- (Re)create backend-prod.env from secrets ---
            echo "DATABASE_URL=\"$DATABASE_URL\"" > backend-prod.env
            echo "JWT_SECRET=\"$JWT_SECRET\"" >> backend-prod.env
            echo "LIVEKIT_URL=\"$LIVEKIT_URL\"" >> backend-prod.env
            echo "LIVEKIT_API_KEY=\"$LIVEKIT_API_KEY\"" >> backend-prod.env
            echo "LIVEKIT_API_SECRET=\"$LIVEKIT_API_SECRET\"" >> backend-prod.env
            echo "CLIENT_URL=\"$CLIENT_URL\"" >> backend-prod.env
            echo "POSTGRES_USER=$POSTGRES_USER" >> backend-prod.env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> backend-prod.env
            echo "POSTGRES_DB=$POSTGRES_DB" >> backend-prod.env
            echo "PORT=3001" >> backend-prod.env

            # Pull latest images & (re)create containers
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d

            # Optional: clean up unused images
            docker image prune -af 