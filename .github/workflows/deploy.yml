name: Deploy to Production

on:
  push:
    branches:
      - master

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: ${{ github.repository_owner }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend Docker image
        id: meta_backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-backend

      - name: Build and push backend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-backend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-backend:${{ github.sha }}
          labels: ${{ steps.meta_backend.outputs.labels }}
          no-cache: true

      - name: Extract metadata for Frontend Docker image
        id: meta_frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-frontend

      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-frontend:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-frontend:${{ github.sha }}
          labels: ${{ steps.meta_frontend.outputs.labels }}
          build-args: |
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
            REACT_APP_LIVEKIT_URL=${{ secrets.REACT_APP_LIVEKIT_URL }}
          no-cache: true

  deploy:
    needs: build-and-push
    runs-on: self-hosted
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Deploy to server
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_OWNER: ${{ env.IMAGE_OWNER }}
        run: |
          echo "NODE_ENV=production" > backend-prod.env
          echo "DATABASE_URL=postgresql://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@db:5432/${{ secrets.POSTGRES_DB }}" >> backend-prod.env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> backend-prod.env
          echo "LIVEKIT_URL=${{ secrets.LIVEKIT_URL }}" >> backend-prod.env
          echo "LIVEKIT_API_KEY=${{ secrets.LIVEKIT_API_KEY }}" >> backend-prod.env
          echo "LIVEKIT_API_SECRET=${{ secrets.LIVEKIT_API_SECRET }}" >> backend-prod.env
          echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> backend-prod.env
          echo "PORT=3001" >> backend-prod.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> backend-prod.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> backend-prod.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> backend-prod.env
          
          # Force remove old images to ensure fresh pull
          sudo docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-backend:latest || true
          sudo docker rmi ${{ env.REGISTRY }}/${{ env.IMAGE_OWNER }}/shpion-frontend:latest || true
          
          sudo -E docker compose -f docker-compose.prod.yml pull
          sudo -E docker compose -f docker-compose.prod.yml down
          sudo -E docker compose -f docker-compose.prod.yml up -d
          
      - name: Clean up
        run: sudo docker image prune -af 