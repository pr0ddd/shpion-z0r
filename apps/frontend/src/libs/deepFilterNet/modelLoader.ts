// DeepFilterNet Model Loader
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WASM

interface ModelCache {
  [modelName: string]: Uint8Array;
}

class DeepFilterModelLoader {
  private static instance: DeepFilterModelLoader;
  private modelCache: ModelCache = {};
  private loadingPromises: Map<string, Promise<Uint8Array>> = new Map();

  static getInstance(): DeepFilterModelLoader {
    if (!DeepFilterModelLoader.instance) {
      DeepFilterModelLoader.instance = new DeepFilterModelLoader();
    }
    return DeepFilterModelLoader.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å DeepFilterNet
   * @param modelName - –∏–º—è –º–æ–¥–µ–ª–∏ (DeepFilterNet3, DeepFilterNet2, etc.)
   * @returns Promise —Å –±–∞–π—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏
   */
  async loadModel(modelName: string = 'DeepFilterNet3'): Promise<Uint8Array> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.modelCache[modelName]) {
      console.log(`üé§ DeepFilter: –ú–æ–¥–µ–ª—å ${modelName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–µ—à–∞`);
      return this.modelCache[modelName];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    if (this.loadingPromises.has(modelName)) {
      console.log(`üé§ DeepFilter: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName}...`);
      return this.loadingPromises.get(modelName)!;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const loadingPromise = (async () => {
      const bytes = await this.fetchModel(modelName);
      return bytes;
    })();
    this.loadingPromises.set(modelName, loadingPromise);

    try {
      const modelBytes = await loadingPromise;
      this.modelCache[modelName] = modelBytes;
      this.loadingPromises.delete(modelName);
      console.log(`üé§ DeepFilter: –ú–æ–¥–µ–ª—å ${modelName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${modelBytes.length} –±–∞–π—Ç)`);
      return modelBytes;
    } catch (error) {
      this.loadingPromises.delete(modelName);
      throw error;
    }
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω –∞—Ä—Ö–∏–≤; –±–µ–∑ GitHub-fallback –∏ –ø–µ—Ä–µ–±–æ—Ä–∞ –ø—É—Ç–µ–π.
  private async fetchModel(modelName: string): Promise<Uint8Array> {
    const path = `/models/DeepFilterNet3_ll_onnx.tar.gz`;
    console.log(`üé§ DF-DEBUG: –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ –ø—É—Ç–∏ ${path}`);

    const resp = await fetch(path);
    if (!resp.ok) {
      throw new Error(`Cannot fetch model: HTTP ${resp.status}`);
    }

    const ab = await resp.arrayBuffer();
    const bytes = new Uint8Array(ab);
    console.log('üé§ DF-DEBUG: –∑–∞–≥—Ä—É–∂–µ–Ω–æ', bytes.length, '–±–∞–π—Ç');

    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ gzip ‚Äì –æ–∫.
    if (bytes[0] === 0x1f && bytes[1] === 0x8b) {
      return bytes;
    }

    // –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä —Ä–∞–∑–∂–∞–ª –∞—Ä—Ö–∏–≤ –∏ —Ç–µ–ø–µ—Ä—å —ç—Ç–æ plain TAR.
    console.warn('üé§ DF-DEBUG: –ø–æ–ª—É—á–µ–Ω TAR –≤–º–µ—Å—Ç–æ TAR.GZ ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω–æ —Å–∂–∏–º–∞–µ–º –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
    const { gzipSync } = await import('fflate');
    const gzipped = gzipSync(bytes);
    console.log('üé§ DF-DEBUG: –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ —Å–∂–∞—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, new size =', gzipped.length, '–±–∞–π—Ç');
    return gzipped;
  }

  private async gunzip(gzBytes: Uint8Array): Promise<Uint8Array> {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º DecompressionStream –µ—Å–ª–∏ –µ—Å—Ç—å
    if (typeof DecompressionStream !== 'undefined') {
      const ds = new DecompressionStream('gzip');
      const resp = new Response(new Blob([gzBytes]).stream().pipeThrough(ds));
      const ab = await resp.arrayBuffer();
      return new Uint8Array(ab);
    }

    // Fallback: –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º fflate (–µ—Å—Ç—å –≤ package.json)
    const { gunzipSync } = await import('fflate');
    return gunzipSync(gzBytes);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏)
   */
  clearCache(): void {
    this.modelCache = {};
    console.log('üé§ DeepFilter: –ö–µ—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
   */
  getCacheInfo(): { [modelName: string]: number } {
    const info: { [modelName: string]: number } = {};
    for (const [name, bytes] of Object.entries(this.modelCache)) {
      info[name] = bytes.length;
    }
    return info;
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX)
   */
  async preloadModel(modelName: string = 'DeepFilterNet3'): Promise<void> {
    try {
      await this.loadModel(modelName);
    } catch (error) {
      console.warn(`üé§ DeepFilter: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const modelLoader = DeepFilterModelLoader.getInstance();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export async function loadDeepFilterModel(modelName?: string): Promise<Uint8Array> {
  return modelLoader.loadModel(modelName);
} 