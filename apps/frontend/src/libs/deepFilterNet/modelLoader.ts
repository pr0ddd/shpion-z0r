// DeepFilterNet Model Loader
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WASM –±–µ–∑ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–µ—à–∞

class DeepFilterModelLoader {
  private static instance: DeepFilterModelLoader;
  private loadingPromises: Map<string, Promise<Uint8Array>> = new Map();

  static getInstance(): DeepFilterModelLoader {
    if (!DeepFilterModelLoader.instance) {
      DeepFilterModelLoader.instance = new DeepFilterModelLoader();
    }
    return DeepFilterModelLoader.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å DeepFilterNet
   * @param modelName - –∏–º—è –º–æ–¥–µ–ª–∏ (DeepFilterNet3, DeepFilterNet2, etc.)
   * @returns Promise —Å –±–∞–π—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏
   */
  async loadModel(modelName: string = 'DeepFilterNet3'): Promise<Uint8Array> {
    // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ ‚Äî –¥–æ–∂–¥—ë–º—Å—è –µ—ë, —á—Ç–æ–±—ã –Ω–µ
    // —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    if (this.loadingPromises.has(modelName)) {
      console.log(`üé§ DeepFilter: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName}...`);
      return this.loadingPromises.get(modelName)!;
    }

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const loadingPromise = this.fetchModel(modelName)
      .finally(() => this.loadingPromises.delete(modelName));

    this.loadingPromises.set(modelName, loadingPromise);
    return loadingPromise;
  }

  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–æ–≥–æ –æ–¥–∏–Ω –∞—Ä—Ö–∏–≤; –±–µ–∑ GitHub-fallback –∏ –ø–µ—Ä–µ–±–æ—Ä–∞ –ø—É—Ç–µ–π.
  private async fetchModel(modelName: string): Promise<Uint8Array> {
    const path = `/models/${modelName}_onnx.tar.gz`;
    console.log(`üé§ DF-DEBUG: –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å –ø–æ –ø—É—Ç–∏ ${path}`);

    const resp = await fetch(path);
    if (!resp.ok) {
      throw new Error(`Cannot fetch model: HTTP ${resp.status}`);
    }

    const ab = await resp.arrayBuffer();
    const bytes = new Uint8Array(ab);
    console.log('üé§ DF-DEBUG: –∑–∞–≥—Ä—É–∂–µ–Ω–æ', bytes.length, '–±–∞–π—Ç');

    // –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ gzip ‚Äì –æ—Ç–¥–∞—ë–º. –ò–Ω–∞—á–µ TAR ‚Üí gzipped TAR (DF –æ–∂–∏–¥–∞–µ—Ç .tar.gz)
    if (bytes[0] === 0x1f && bytes[1] === 0x8b) {
      return bytes;
    }

    console.warn('üé§ DF-DEBUG: –º–æ–¥–µ–ª—å –ø—Ä–∏—à–ª–∞ –∫–∞–∫ TAR, —Å–∂–∏–º–∞–µ–º –≤ gzip');
    const { gzipSync } = await import('fflate');
    const gzipped = gzipSync(bytes);
    console.log('üé§ DF-DEBUG: –ø–æ—Å–ª–µ gzip size =', gzipped.length, '–±–∞–π—Ç');
    return gzipped;
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX). –°–µ–π—á–∞—Å —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ ¬´—Ç—ë–ø–ª—ã–π¬ª
   * –≤—ã–∑–æ–≤ loadModel(), –∫–æ—Ç–æ—Ä—ã–π –æ—Ç—Ä–∞–±–æ—Ç–∞–µ—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∂–µ
   * –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è.
   */
  async preloadModel(modelName: string = 'DeepFilterNet3'): Promise<void> {
    try {
      await this.loadModel(modelName);
    } catch (error) {
      console.warn(`üé§ DeepFilter: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const modelLoader = DeepFilterModelLoader.getInstance();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export async function loadDeepFilterModel(modelName?: string): Promise<Uint8Array> {
  return modelLoader.loadModel(modelName);
} 