// DeepFilterNet Model Loader
// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç –º–æ–¥–µ–ª—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ WASM

interface ModelCache {
  [modelName: string]: Uint8Array;
}

class DeepFilterModelLoader {
  private static instance: DeepFilterModelLoader;
  private modelCache: ModelCache = {};
  private loadingPromises: Map<string, Promise<Uint8Array>> = new Map();

  static getInstance(): DeepFilterModelLoader {
    if (!DeepFilterModelLoader.instance) {
      DeepFilterModelLoader.instance = new DeepFilterModelLoader();
    }
    return DeepFilterModelLoader.instance;
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å DeepFilterNet
   * @param modelName - –∏–º—è –º–æ–¥–µ–ª–∏ (DeepFilterNet3, DeepFilterNet2, etc.)
   * @returns Promise —Å –±–∞–π—Ç–∞–º–∏ –º–æ–¥–µ–ª–∏
   */
  async loadModel(modelName: string = 'DeepFilterNet3'): Promise<Uint8Array> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if (this.modelCache[modelName]) {
      console.log(`üé§ DeepFilter: –ú–æ–¥–µ–ª—å ${modelName} –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –∫–µ—à–∞`);
      return this.modelCache[modelName];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –ª–∏ —É–∂–µ
    if (this.loadingPromises.has(modelName)) {
      console.log(`üé§ DeepFilter: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName}...`);
      return this.loadingPromises.get(modelName)!;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    const loadingPromise = this.fetchModel(modelName);
    this.loadingPromises.set(modelName, loadingPromise);

    try {
      const modelBytes = await loadingPromise;
      this.modelCache[modelName] = modelBytes;
      this.loadingPromises.delete(modelName);
      console.log(`üé§ DeepFilter: –ú–æ–¥–µ–ª—å ${modelName} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (${modelBytes.length} –±–∞–π—Ç)`);
      return modelBytes;
    } catch (error) {
      this.loadingPromises.delete(modelName);
      throw error;
    }
  }

  private async fetchModel(modelName: string): Promise<Uint8Array> {
    const modelPaths = [
      `/models/DeepFilterNet3_onnx.tar.gz`,   // üéØ –§–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
      `/models/${modelName}_onnx.tar.gz`,     // ONNX –≤–µ—Ä—Å–∏—è
      `/models/${modelName}.tar.gz`,           // –õ–æ–∫–∞–ª—å–Ω–∞—è –º–æ–¥–µ–ª—å
      `/models/deepfilter3.tar.gz`,            // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏–º—è
      `/models/default.tar.gz`,                // –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
    ];

    let lastError: Error | null = null;

    // –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ä–∞–∑–Ω—ã—Ö –ø—É—Ç–µ–π
    for (const path of modelPaths) {
      try {
        console.log(`üé§ DeepFilter: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –∏–∑ ${path}`);
        const response = await fetch(path);
        
        if (response.ok) {
          const arrayBuffer = await response.arrayBuffer();
          return new Uint8Array(arrayBuffer);
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error));
        console.warn(`üé§ DeepFilter: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ ${path}:`, lastError.message);
      }
    }

    // –ï—Å–ª–∏ –≤—Å–µ –ø—É—Ç–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å GitHub
    try {
      console.log(`üé§ DeepFilter: –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å GitHub...`);
      const githubUrl = `https://github.com/Rikorose/DeepFilterNet/releases/download/v0.5.6/${modelName}.tar.gz`;
      const response = await fetch(githubUrl);
      
      if (response.ok) {
        const arrayBuffer = await response.arrayBuffer();
        console.log(`üé§ DeepFilter: –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —Å GitHub (${arrayBuffer.byteLength} –±–∞–π—Ç)`);
        return new Uint8Array(arrayBuffer);
      }
    } catch (error) {
      console.warn(`üé§ DeepFilter: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å GitHub:`, error);
    }

    // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—É—é –º–æ–¥–µ–ª—å (fallback)
    console.warn(`üé§ DeepFilter: –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback`);
    return new Uint8Array(0); // –ü—É—Å—Ç–∞—è –º–æ–¥–µ–ª—å - –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ passthrough —Ä–µ–∂–∏–º–µ
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –∫–µ—à –º–æ–¥–µ–ª–µ–π (–ø–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–∞–º—è—Ç–∏)
   */
  clearCache(): void {
    this.modelCache = {};
    console.log('üé§ DeepFilter: –ö–µ—à –º–æ–¥–µ–ª–µ–π –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö
   */
  getCacheInfo(): { [modelName: string]: number } {
    const info: { [modelName: string]: number } = {};
    for (const [name, bytes] of Object.entries(this.modelCache)) {
      info[name] = bytes.length;
    }
    return info;
  }

  /**
   * –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ (–¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX)
   */
  async preloadModel(modelName: string = 'DeepFilterNet3'): Promise<void> {
    try {
      await this.loadModel(modelName);
    } catch (error) {
      console.warn(`üé§ DeepFilter: –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName} –Ω–µ —É–¥–∞–ª–∞—Å—å:`, error);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const modelLoader = DeepFilterModelLoader.getInstance();

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
export async function loadDeepFilterModel(modelName?: string): Promise<Uint8Array> {
  return modelLoader.loadModel(modelName);
} 