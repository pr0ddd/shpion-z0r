class MyProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    this.initOptions = options.processorOptions;
    this.attenLim = this.initOptions.attenLim || 100;
    this.postFilterBeta = this.initOptions.postFilterBeta || 0.05;
    this.dfJsCode = this.initOptions.dfJsCode || null;
    this.wasmBytes = this.initOptions.wasmBytes || null;
    this.modelBytes = this.initOptions.modelBytes || null;

    this.wasm = null;
    this.dfState = null;
    this.frameLength = 0;
    this.isInitialized = false;

    // this.initializeDeepFilter();
  }

  async initializeDeepFilter() {
    try {
      if (this.dfJsCode) {
        const patched = `${this.dfJsCode}\nglobalThis.wasm_bindgen = wasm_bindgen;`;
        // eslint-disable-next-line no-eval
        (0, eval)(patched);
      }

      if (typeof globalThis.wasm_bindgen !== 'function') {
        throw new Error('wasm_bindgen is not available after evaluating df.js');
      }

      if (this.wasmBytes && this.wasmBytes.length) {
        try {
          await globalThis.wasm_bindgen(this.wasmBytes);
        this.wasm = globalThis.wasm_bindgen; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ wasm_bindgen

        } catch (error) {
          console.error('üé§ DeepFilterNet: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        }
      }

      // 3. –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeepFilterNet.
      try {
        this.dfState = this.wasm.df_create(this.modelBytes, this.attenLim);
      } catch (error) {
        console.log(error)
      }


      this.framesProcessed = 0;
      this.isInitialized = true;

      // –°–æ–æ–±—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–± —É—Å–ø–µ—Ö–µ.
      this.port.postMessage({ type: 'ready' });
    } catch (error) {
      console.error('üé§ DeepFilterNet: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.isInitialized = false;
      this.port.postMessage({
        type: 'error',
        data: { message: error?.message || String(error) },
      });
    }
  }

  process(inputs, outputs) {
    const input = inputs[0]; // Float32Array[128]
    const output = outputs[0]; // Float32Array[128]

    // –ü—Ä–∏–º–µ—Ä: –∫–æ–ø–∏—Ä—É–µ–º –≤—Ö–æ–¥ –Ω–∞ –≤—ã—Ö–æ–¥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    for (let channel = 0; channel < input.length; ++channel) {
      output[channel].set(input[channel]);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º true —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–∞–±–æ—Ç—É
    return true;
  }
}

registerProcessor('my-processor', MyProcessor);
