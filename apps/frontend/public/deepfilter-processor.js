// DeepFilterNet AudioWorkletProcessor
// –†–∞–±–æ—Ç–∞–µ—Ç –≤ AudioWorkletGlobalScope (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫)
class DeepFilterProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    
    this.isInitialized = false;
    this.wasm = null;
    this.dfState = null;
    this.frameLength = 0;

    /**
     * –ë—É—Ñ–µ—Ä—ã –¥–ª—è –∞–∫–∫—É–º—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–∏—Ö —Å—ç–º–ø–ª–æ–≤ –∏ –≤—ã–¥–∞—á–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö.
     * –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–µ JS-–º–∞—Å—Å–∏–≤—ã, —Ç.–∫. –æ–Ω–∏ –ø—Ä–æ—Å—Ç—ã –≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±—ã—Å—Ç—Ä—ã
     * –ø—Ä–∏ –Ω–µ–±–æ–ª—å—à–∏—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö (audio frame ‚â§ 512).
     */
    this.inputBuffer = [];
    this.outputBuffer = [];

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    this.initOptions = options.processorOptions || {};

    // DeepFilterNet –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.attenLim = this.initOptions.attenLim || 100; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —à—É–º–∞, –¥–ë
    this.postFilterBeta = this.initOptions.postFilterBeta || 0.05;

    // –ö–æ–¥ glue df.js –∏ –±–∏–Ω–∞—Ä–Ω–∏–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ fetch
    this.dfJsCode = this.initOptions.dfJsCode || null;
    this.wasmBytes = this.initOptions.wasmBytes || null;

    // –ú–æ–¥–µ–ª—å DeepFilterNet –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –±–∞–π—Ç–∞–º–∏ (Uint8Array)
    this.modelBytes = this.initOptions.modelBytes || null;

    // –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–∏–∑ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    this.port.onmessage = this.handleMessage.bind(this);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é WASM
    this.initializeDeepFilter();

    console.log('üé§ DeepFilterProcessor: –°–æ–∑–¥–∞–Ω');
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç wasm-–º–æ–¥—É–ª—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DeepFilterNet.
   * –ü–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑ passthrough-—Ä–µ–∂–∏–º–∞ –≤ —Ä–µ–∂–∏–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è.
   */
  async initializeDeepFilter() {
    try {
      if (!this.modelBytes || this.modelBytes.length === 0) {
        throw new Error('Model bytes not provided ‚Äì DeepFilter —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ passthrough —Ä–µ–∂–∏–º–µ');
      }

      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º glue-–∫–æ–¥ df.js. fetch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–Ω—É—Ç—Ä–∏ AudioWorklet, –ø–æ—ç—Ç–æ–º—É
      //    –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ dfJsCode –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (processorOptions.dfJsCode).
      if (this.dfJsCode) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ö–≤–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç wasm_bindgen –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å,
        // —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ eval-–º–æ–¥—É–ª—è.
        const patched = `${this.dfJsCode}\nglobalThis.wasm_bindgen = wasm_bindgen;`;
        // eslint-disable-next-line no-eval
        (0, eval)(patched);
      } else if (typeof fetch !== 'undefined') {
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback, –µ—Å–ª–∏ fetch —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä Chrome 123+)
        const resp = await fetch('/wasm/df.js');
        if (!resp.ok) throw new Error(`Cannot load df.js (${resp.status})`);
        const code = await resp.text();
        // eslint-disable-next-line no-eval
        (0, eval)(`${code}\nglobalThis.wasm_bindgen = wasm_bindgen;`);
      } else {
        throw new Error('df.js code not provided and fetch is unavailable in AudioWorklet');
      }

      if (typeof globalThis.wasm_bindgen !== 'function') {
        throw new Error('wasm_bindgen is not available after evaluating df.js');
      }

      console.log('üé§ DF-DEBUG: wasm_bindgen available:', typeof globalThis.wasm_bindgen);

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm, –ø–µ—Ä–µ–¥–∞–≤ –ø—É—Ç—å –¥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞.
      //    wasm_bindgen –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
      if (this.wasmBytes && this.wasmBytes.length) {
        console.log('üé§ DF-DEBUG: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm –∏–∑ –±–∞–π—Ç–æ–≤, size =', this.wasmBytes.length);
        await globalThis.wasm_bindgen(this.wasmBytes);
      } else {
        console.log('üé§ DF-DEBUG: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm –∏–∑ /wasm/df_bg.wasm');
        await globalThis.wasm_bindgen('/wasm/df_bg.wasm');
      }
      this.wasm = globalThis.wasm_bindgen; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ wasm_bindgen

      console.log('üé§ DF-DEBUG: wasm init done, attempting df_create. Model bytes =', this.modelBytes?.length);
      if (this.modelBytes && this.modelBytes.length) {
        const header = Array.from(this.modelBytes.slice(0, 4)).map(b=>b.toString(16).padStart(2,'0')).join(' ');
        console.log('üé§ DF-DEBUG: model header (first 4 bytes):', header);
      }

      // 3. –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeepFilterNet.
      this.dfState = this.wasm.df_create(this.modelBytes, this.attenLim);
      this.frameLength = this.wasm.df_get_frame_length(this.dfState);
      this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);

      this.framesProcessed = 0;
      this.isInitialized = true;

      console.log('üé§ DeepFilterProcessor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, frameLength =', this.frameLength);

      // –°–æ–æ–±—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–± —É—Å–ø–µ—Ö–µ.
      this.port.postMessage({ type: 'ready' });

    } catch (error) {
      console.error('üé§ DeepFilterNet: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.isInitialized = false;
      this.port.postMessage({ type: 'error', data: { message: error?.message || String(error) } });
    }
  }

  process(inputs, outputs, parameters) {
    const input = inputs[0];
    const output = outputs[0];

    // –ï—Å–ª–∏ DeepFilterNet –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äì –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (passthrough)
    if (!this.isInitialized || !this.dfState) {
      for (let channel = 0; channel < Math.min(input.length, output.length); channel++) {
        const inputChannel = input[channel];
        const outputChannel = output[channel];
        for (let i = 0; i < inputChannel.length; i++) {
          outputChannel[i] = inputChannel[i];
        }
      }
      return true;
    }

    // –ü–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ mono-–∫–∞–Ω–∞–ª (channel 0). –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å.
    const inCh = input[0] || new Float32Array(0);
    const outCh = output[0] || new Float32Array(0);

    // 1. –ö–æ–ø–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Å—ç–º–ø–ª—ã –≤ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–π –±—É—Ñ–µ—Ä.
    for (let i = 0; i < inCh.length; i++) this.inputBuffer.push(inCh[i]);

    // 2. –ü–æ–∫–∞ –≤ –±—É—Ñ–µ—Ä–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–¥—Ä.
    while (this.inputBuffer.length >= this.frameLength) {
      const frame = this.inputBuffer.splice(0, this.frameLength);
      const processed = this.wasm.df_process_frame(this.dfState, new Float32Array(frame));
      this.outputBuffer.push(...processed);
      this.framesProcessed++;
    }

    // 3. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—ç–º–ø–ª—ã –≤ –≤—ã—Ö–æ–¥–Ω–æ–π –±—É—Ñ–µ—Ä. –ï—Å–ª–∏ –∏—Ö –º–µ–Ω—å—à–µ ‚Äì
    //    –¥–æ–ø–æ–ª–Ω—è–µ–º –Ω–µ—Ö–≤–∞—Ç–∞—é—â–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é.
    for (let i = 0; i < outCh.length; i++) {
      outCh[i] = this.outputBuffer.length ? this.outputBuffer.shift() : inCh[i];
    }

    // 4. –ü—Ä–æ–±—Ä–æ—Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    for (let channel = 1; channel < Math.min(input.length, output.length); channel++) {
      const src = input[channel];
      const dst = output[channel];
      for (let i = 0; i < src.length; i++) dst[i] = src[i];
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ ~0.5 —Å–µ–∫ (128*43 ‚âà 5500 —Å—ç–º–ø–ª–æ–≤ –ø—Ä–∏ 48kHz).
    if (this.framesProcessed % 43 === 0) {
      this.port.postMessage({
        type: 'stats',
        data: { framesProcessed: this.framesProcessed },
      });
    }

    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  static get parameterDescriptors() {
    return [
      {
        name: 'enabled',
        defaultValue: 1,
        minValue: 0,
        maxValue: 1,
        automationRate: 'k-rate'
      },
      {
        name: 'attenuation',
        defaultValue: 100,
        minValue: 10,
        maxValue: 200,
        automationRate: 'k-rate'
      }
    ];
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ */
  handleMessage(event) {
    const { type, data } = event.data || {};
    if (!type) return;

    switch (type) {
      case 'updateParams':
        if (data?.attenLim !== undefined) {
          this.attenLim = data.attenLim;
          // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ DeepFilterNet –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
          // –ª–∏–º–∏—Ç–∞ ¬´–Ω–∞ –ª–µ—Ç—É¬ª, –ø–æ—ç—Ç–æ–º—É –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        }
        if (data?.postFilterBeta !== undefined) {
          this.postFilterBeta = data.postFilterBeta;
          if (this.isInitialized && this.dfState) {
            this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);
          }
        }
        break;

      case 'setAttenuation':
        if (data?.attenLim !== undefined) {
          this.attenLim = data.attenLim;
          // –ù–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–ª–∞–±–ª–µ–Ω–∏—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        }
        break;

      case 'setPostFilter':
        if (data?.beta !== undefined) {
          this.postFilterBeta = data.beta;
          if (this.isInitialized && this.dfState) {
            this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);
          }
        }
        break;

      /* –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å WASM, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—Å–∏—Ç dispose */
      case 'dispose':
        if (this.isInitialized && this.dfState) {
          try {
            if (this.wasm.__wbg_dfstate_free) {
              this.wasm.__wbg_dfstate_free(this.dfState);
            } else if (this.wasm.df_destroy) {
              this.wasm.df_destroy(this.dfState);
            }
          } catch (e) {
            console.warn('DF dispose error', e);
          }
          this.dfState = null;
          this.isInitialized = false;
        }
        break;
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
registerProcessor('deepfilter-processor', DeepFilterProcessor); 