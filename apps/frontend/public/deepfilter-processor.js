// DeepFilterNet AudioWorkletProcessor
// –†–∞–±–æ—Ç–∞–µ—Ç –≤ AudioWorkletGlobalScope (–æ—Ç–¥–µ–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫)
class DeepFilterProcessor extends AudioWorkletProcessor {
  constructor(options) {
    super();
    
    this.isInitialized = false;
    this.wasm = null;
    this.dfState = null;
    this.frameLength = 0;

    // --- –±—É—Ñ–µ—Ä—ã –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è frameLength ---
    this.inBuffer = null;   // Float32Array
    this.inLen = 0;         // —Å–∫–æ–ª—å–∫–æ —Å—ç–º–ø–ª–æ–≤ –Ω–∞–∫–æ–ø–ª–µ–Ω–æ

    this.outBuffer = null;  // Float32Array FIFO –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤
    this.outLen = 0;        // —Å–∫–æ–ª—å–∫–æ —Å—ç–º–ø–ª–æ–≤ –≥–æ—Ç–æ–≤–æ –∫ –≤—ã–¥–∞—á–µ

    // --- debug stats ---
    this._dbgFrames = 0;
    this._dbgUnderruns = 0;
    this._dbgLongProc = 0;

    // --- smoothing state ---
    this.prevTail = 0; // –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å—ç–º–ø–ª –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–∞–¥—Ä–∞
    this.clicks = 0;   // —Å—á—ë—Ç—á–∏–∫ —Ä–µ–∑–∫–∏—Ö —Å—Ç—ã–∫–æ–≤

    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
    this.initOptions = options.processorOptions || {};

    // DeepFilterNet –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    this.attenLim = this.initOptions.attenLim || 100; // –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –æ—Å–ª–∞–±–ª–µ–Ω–∏–µ —à—É–º–∞, –¥–ë
    this.postFilterBeta = this.initOptions.postFilterBeta || 0.05;

    // –ö–æ–¥ glue df.js –∏ –±–∏–Ω–∞—Ä–Ω–∏–∫ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Å –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞, —á—Ç–æ–±—ã –æ–±–æ–π—Ç–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ fetch
    this.dfJsCode = this.initOptions.dfJsCode || null;
    this.wasmBytes = this.initOptions.wasmBytes || null;

    // –ú–æ–¥–µ–ª—å DeepFilterNet –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –±–∞–π—Ç–∞–º–∏ (Uint8Array)
    this.modelBytes = this.initOptions.modelBytes || null;

    // –°–ª—É—à–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (–∏–∑ React-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
    this.port.onmessage = this.handleMessage.bind(this);

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é WASM
    this.initializeDeepFilter();

    console.log('üé§ DeepFilterProcessor: –°–æ–∑–¥–∞–Ω');
  }

  /**
   * –ó–∞–≥—Ä—É–∂–∞–µ—Ç wasm-–º–æ–¥—É–ª—å –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç DeepFilterNet.
   * –ü–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∏–∑ passthrough-—Ä–µ–∂–∏–º–∞ –≤ —Ä–µ–∂–∏–º —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏—è.
   */
  async initializeDeepFilter() {
    try {
      if (!this.modelBytes || this.modelBytes.length === 0) {
        throw new Error('Model bytes not provided ‚Äì DeepFilter —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ passthrough —Ä–µ–∂–∏–º–µ');
      }

      // 1. –ó–∞–≥—Ä—É–∂–∞–µ–º glue-–∫–æ–¥ df.js. fetch –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤–Ω—É—Ç—Ä–∏ AudioWorklet, –ø–æ—ç—Ç–æ–º—É
      //    –æ–∂–∏–¥–∞–µ–º, —á—Ç–æ dfJsCode –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ (processorOptions.dfJsCode).
      if (this.dfJsCode) {
        // –í—Å—Ç–∞–≤–ª—è–µ–º —Ö–≤–æ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ—Ç wasm_bindgen –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å,
        // —á—Ç–æ–±—ã –æ–Ω –±—ã–ª –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ eval-–º–æ–¥—É–ª—è.
        const patched = `${this.dfJsCode}\nglobalThis.wasm_bindgen = wasm_bindgen;`;
        // eslint-disable-next-line no-eval
        (0, eval)(patched);
      } else if (typeof fetch !== 'undefined') {
        // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback, –µ—Å–ª–∏ fetch —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä Chrome 123+)
        const resp = await fetch('/wasm/df.js');
        if (!resp.ok) throw new Error(`Cannot load df.js (${resp.status})`);
        const code = await resp.text();
        // eslint-disable-next-line no-eval
        (0, eval)(`${code}\nglobalThis.wasm_bindgen = wasm_bindgen;`);
      } else {
        throw new Error('df.js code not provided and fetch is unavailable in AudioWorklet');
      }

      if (typeof globalThis.wasm_bindgen !== 'function') {
        throw new Error('wasm_bindgen is not available after evaluating df.js');
      }

      console.log('üé§ DF-DEBUG: wasm_bindgen available:', typeof globalThis.wasm_bindgen);

      // 2. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm, –ø–µ—Ä–µ–¥–∞–≤ –ø—É—Ç—å –¥–æ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞.
      //    wasm_bindgen –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.
      if (this.wasmBytes && this.wasmBytes.length) {
        console.log('üé§ DF-DEBUG: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm –∏–∑ –±–∞–π—Ç–æ–≤, size =', this.wasmBytes.length);
        await globalThis.wasm_bindgen(this.wasmBytes);
      } else {
        console.log('üé§ DF-DEBUG: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º wasm –∏–∑ /wasm/df_bg.wasm');
        await globalThis.wasm_bindgen('/wasm/df_bg.wasm');
      }
      this.wasm = globalThis.wasm_bindgen; // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø—Ä—è–º–æ –≤ wasm_bindgen

      console.log('üé§ DF-DEBUG: wasm init done, attempting df_create. Model bytes =', this.modelBytes?.length);
      if (this.modelBytes && this.modelBytes.length) {
        const header = Array.from(this.modelBytes.slice(0, 4)).map(b=>b.toString(16).padStart(2,'0')).join(' ');
        console.log('üé§ DF-DEBUG: model header (first 4 bytes):', header);
      }

      // 3. –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ DeepFilterNet.
      this.dfState = this.wasm.df_create(this.modelBytes, this.attenLim);
      this.frameLength = this.wasm.df_get_frame_length(this.dfState);

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª—å—Ü–µ–≤—ã–µ –±—É—Ñ–µ—Ä—ã (–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–∞–ø–∞—Å–∞ –Ω–∞ 8 –∫–∞–¥—Ä–æ–≤)
      const CAP_FRAMES = 8;
      this.inBuffer = new Float32Array(this.frameLength * CAP_FRAMES);
      this.inLen = 0;

      this.outBuffer = new Float32Array(this.frameLength * CAP_FRAMES);
      this.outLen = 0;

      this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);

      this.framesProcessed = 0;
      this.isInitialized = true;

      console.log('üé§ DeepFilterProcessor: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, frameLength =', this.frameLength);

      // –°–æ–æ–±—â–∞–µ–º –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –æ–± —É—Å–ø–µ—Ö–µ.
      this.port.postMessage({ type: 'ready' });

    } catch (error) {
      console.error('üé§ DeepFilterNet: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
      this.isInitialized = false;
      this.port.postMessage({ type: 'error', data: { message: error?.message || String(error) } });
    }
  }

  process(inputs, outputs, parameters) {
    const t0 = currentTime; // AudioWorklet global timeline (seconds)

    const input = inputs[0];
    const output = outputs[0];

    // –ï—Å–ª–∏ DeepFilterNet –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤ ‚Äì –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ (passthrough)
    if (!this.isInitialized || !this.dfState) {
      for (let channel = 0; channel < Math.min(input.length, output.length); channel++) {
        const inputChannel = input[channel];
        const outputChannel = output[channel];
        for (let i = 0; i < inputChannel.length; i++) {
          outputChannel[i] = inputChannel[i];
        }
      }
      return true;
    }

    // –ü–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ mono-–∫–∞–Ω–∞–ª (channel 0). –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ø–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å.
    const inCh = input[0] || new Float32Array(0);
    const outCh = output[0] || new Float32Array(0);

    // 1. –ü–∏—à–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ inBuffer, —Ä–∞—Å—à–∏—Ä—è–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if (this.inLen + inCh.length > this.inBuffer.length) {
      const newBuf = new Float32Array((this.inBuffer.length + inCh.length) * 2);
      newBuf.set(this.inBuffer.subarray(0, this.inLen));
      this.inBuffer = newBuf;
    }
    this.inBuffer.set(inCh, this.inLen);
    this.inLen += inCh.length;

    // 2. –ü–æ–∫–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω —Ü–µ–ª—ã–π –∫–∞–¥—Ä ‚Äì –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
    while (this.inLen >= this.frameLength) {
      const frameView = this.inBuffer.subarray(0, this.frameLength);
      // –ö–æ–ø–∏—Ä—É–µ–º –∫–∞–¥—Ä, —á—Ç–æ–±—ã WASM –Ω–µ –¥–µ—Ä–∂–∞–ª —Å—Å—ã–ª–∫—É –Ω–∞ –±—É—Ñ–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Å–º–µ—Å—Ç–∏–º –Ω–∏–∂–µ
      const frame = new Float32Array(frameView);
      const processed = this.wasm.df_process_frame(this.dfState, frame);

      // –ø–æ–ª–æ–∂–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ outBuffer —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å
      // NaN / Infinity –∏ –∫–ª–∏–ø–ø–∏–Ω–≥–∞, –≤—ã–∑—ã–≤–∞–≤—à–µ–≥–æ ¬´—Ö—Ä–∏–ø¬ª –≤–æ –≤—Å—ë–º –±—Ä–∞—É–∑–µ—Ä–µ.
      if (this.outLen + processed.length > this.outBuffer.length) {
        const newOut = new Float32Array((this.outBuffer.length + processed.length) * 2);
        newOut.set(this.outBuffer.subarray(0, this.outLen));
        this.outBuffer = newOut;
      }

      // --- –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∏–ø–ø–∏–Ω–≥–∞ ---
      let peakIn = 0;
      for (let i = 0; i < processed.length; i++) {
        const a = Math.abs(processed[i]);
        if (a > peakIn) peakIn = a;
      }

      const USER_GAIN = 3;      // –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –≥—Ä–æ–º–∫–æ—Å—Ç–∏, –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ UI
      const TARGET_PEAK = 0.7;  // –∑–∞–ø–∞—Å ~3 –¥–ë –¥–æ –∫–ª–∏–ø–ø–∏–Ω–≥–∞
      const autoGain = peakIn ? Math.min(USER_GAIN * TARGET_PEAK / peakIn, USER_GAIN) : USER_GAIN;

      let peakOut = 0;

      const FADE = 32; // –¥–ª–∏–Ω–∞ –∫—Ä–æ—Å—Å-—Ñ–µ–π–¥–∞

      // –¥–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ä–µ–∑–∫–∏–π —Å—Ç—ã–∫ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏
      if (processed.length) {
        if (Math.abs(processed[0] * autoGain - this.prevTail) > 0.1) this.clicks++;
      }

      for (let i = 0; i < processed.length; i++) {
        let s = processed[i] * autoGain;
        // –ø—Ä–∏–º–µ–Ω—è–µ–º –∫—Ä–æ—Å—Å-—Ñ–µ–π–¥ –≤ –ø–µ—Ä–≤—ã–µ FADE —Å—ç–º–ø–ª–æ–≤ –∫–∞–¥—Ä–∞
        if (i < FADE) {
          const alpha = i / FADE;
          s = (1 - alpha) * this.prevTail + alpha * s;
        }
        this.outBuffer[this.outLen + i] = s;
        const a = Math.abs(s);
        if (a > peakOut) peakOut = a;
      }

      // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–≤–æ—Å—Ç –∫–∞–¥—Ä–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
      this.prevTail = this.outBuffer[this.outLen + processed.length - 1] || this.prevTail;
      this.outLen += processed.length;

      if (this.framesProcessed % 200 === 0) {
        console.log('[DF-AW] gain', autoGain.toFixed(2), 'peak', peakOut.toFixed(3), 'clicks', this.clicks);
        this.clicks = 0;
      }

      // —Å–¥–≤–∏–≥–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤—Ö–æ–¥–Ω–æ–≥–æ –±—É—Ñ–µ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ
      this.inBuffer.copyWithin(0, this.frameLength, this.inLen);
      this.inLen -= this.frameLength;
      this.framesProcessed++;

      continue; // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏ while

    }

    // 3. –í—ã–¥–∞—ë–º —Å—Ç–æ–ª—å–∫–æ, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –≤ —Ç–µ–∫—É—â–µ–º render quantum (outCh.length)
    const needed = outCh.length;
    if (this.outLen >= outCh.length) {
      outCh.set(this.outBuffer.subarray(0, outCh.length));
      this.outBuffer.copyWithin(0, outCh.length, this.outLen);
      this.outLen -= outCh.length;
    } else {
      // –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ‚Äî underrun
      this._dbgUnderruns++;
      // –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö ‚Äî –≤—ã–¥–∞—ë–º —á—Ç–æ –µ—Å—Ç—å + –æ—Ä–∏–≥–∏–Ω–∞–ª –¥–ª—è —Å–∏–Ω—Ö—Ä—ã
      if (this.outLen > 0) {
        outCh.set(this.outBuffer.subarray(0, this.outLen));
      }
      for (let i = this.outLen; i < outCh.length; i++) outCh[i] = inCh[i - this.outLen] || 0;
      this.outLen = 0;
    }

    // 4. –ü—Ä–æ–±—Ä–æ—Å –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
    for (let channel = 1; channel < Math.min(input.length, output.length); channel++) {
      const src = input[channel];
      const dst = output[channel];
      for (let i = 0; i < src.length; i++) dst[i] = src[i];
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑ –≤ ~0.5 —Å–µ–∫ (128*43 ‚âà 5500 —Å—ç–º–ø–ª–æ–≤ –ø—Ä–∏ 48kHz).
    if (this.framesProcessed % 43 === 0) {
      this.port.postMessage({
        type: 'stats',
        data: { framesProcessed: this.framesProcessed },
      });
    }

    // --- debug timings ---
    const procTimeMs = (currentTime - t0) * 1000;
    if (procTimeMs > 2.8) this._dbgLongProc++;

    if (++this._dbgFrames % 200 === 0) {
      console.log('[DF-AW] frames', this._dbgFrames, 'underruns', this._dbgUnderruns, 'long>2.8ms', this._dbgLongProc);
      this._dbgUnderruns = 0;
      this._dbgLongProc = 0;
    }

    return true;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞
  static get parameterDescriptors() {
    return [
      {
        name: 'enabled',
        defaultValue: 1,
        minValue: 0,
        maxValue: 1,
        automationRate: 'k-rate'
      },
      {
        name: 'attenuation',
        defaultValue: 100,
        minValue: 10,
        maxValue: 200,
        automationRate: 'k-rate'
      }
    ];
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫–∞ */
  handleMessage(event) {
    const { type, data } = event.data || {};
    if (!type) return;

    switch (type) {
      case 'updateParams':
        if (data?.attenLim !== undefined) {
          this.attenLim = data.attenLim;
          // –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ DeepFilterNet –Ω–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è
          // –ª–∏–º–∏—Ç–∞ ¬´–Ω–∞ –ª–µ—Ç—É¬ª, –ø–æ—ç—Ç–æ–º—É –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        }
        if (data?.postFilterBeta !== undefined) {
          this.postFilterBeta = data.postFilterBeta;
          if (this.isInitialized && this.dfState) {
            this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);
          }
        }
        break;

      case 'setAttenuation':
        if (data?.attenLim !== undefined) {
          this.attenLim = data.attenLim;
          // –ù–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–≥–æ API –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Å–ª–∞–±–ª–µ–Ω–∏—è –≤ —Ä–∞–Ω—Ç–∞–π–º–µ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        }
        break;

      case 'setPostFilter':
        if (data?.beta !== undefined) {
          this.postFilterBeta = data.beta;
          if (this.isInitialized && this.dfState) {
            this.wasm.df_set_post_filter_beta(this.dfState, this.postFilterBeta);
          }
        }
        break;

      /* –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–∞–º—è—Ç—å WASM, –∫–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫ –ø—Ä–æ—Å–∏—Ç dispose */
      case 'dispose':
        if (this.isInitialized && this.dfState) {
          try {
            if (this.wasm.__wbg_dfstate_free) {
              this.wasm.__wbg_dfstate_free(this.dfState);
            } else if (this.wasm.df_destroy) {
              this.wasm.df_destroy(this.dfState);
            }
          } catch (e) {
            console.warn('DF dispose error', e);
          }
          this.dfState = null;
          this.isInitialized = false;
        }
        break;
    }
  }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
registerProcessor('deepfilter-processor', DeepFilterProcessor); 