generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---- ENUMS ----

enum MemberRole {
  ADMIN
  MEMBER
}

// ---- MODELS ----

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?  @db.Text // Storing as Base64 for now
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers      Member[]
  ownedServers Server[]   @relation("ServerOwner")
  messages     Message[]

  @@map("users")
}

model SfuServer {
  id   String @id @default(cuid())
  name String
  url  String

  servers Server[] @relation("ServerSfu")

  @@map("sfu_servers")
}

model Server {
  id         String   @id @default(cuid())
  name       String
  icon       String?  @db.Text // Storing as Base64 for now
  description String? @db.Text
  sfuId      String?
  inviteCode String   @unique @default(cuid())
  ownerId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  owner   User      @relation("ServerOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  members Member[]
  messages Message[]
  sfu     SfuServer? @relation("ServerSfu", fields: [sfuId], references: [id])

  @@map("servers")
}

model Member {
  id     String     @id @default(cuid())
  role   MemberRole @default(MEMBER)
  userId String
  serverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@unique([userId, serverId])
  @@map("members")
}

model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text
  authorId  String
  serverId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

 