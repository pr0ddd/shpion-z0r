import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User, AuthContextType } from '../types';
import { authAPI } from '../services/api';

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [token, setToken] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  useEffect(() => {
    console.log('üîÑ useAuth: Initializing from localStorage...');
    
    const savedToken = localStorage.getItem('authToken');
    const savedUser = localStorage.getItem('user');
    
    if (savedToken && savedUser) {
      try {
        const parsedUser = JSON.parse(savedUser);
        console.log('‚úÖ useAuth: Restored user from localStorage:', parsedUser.username);
        setToken(savedToken);
        setUser(parsedUser);
      } catch (error) {
        console.warn('‚ùå useAuth: Failed to parse saved user, clearing...');
        clearAuth();
      }
    } else {
      console.log('üîÑ useAuth: No saved credentials found');
    }
    
    setIsLoading(false);
  }, []);

  const clearAuth = () => {
    console.log('üóëÔ∏è useAuth: Clearing auth...');
    setUser(null);
    setToken(null);
    localStorage.removeItem('authToken');
    localStorage.removeItem('user');
  };

  const login = async (email: string, password: string): Promise<void> => {
    setIsLoading(true);
    try {
      console.log('üîê useAuth: Logging in...');
      const response = await authAPI.login(email, password);
      
      if (response.success && response.data) {
        const { user: userData, token: userToken } = response.data;
        
        console.log('‚úÖ useAuth: Login successful, saving to localStorage...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        setUser(userData);
        setToken(userToken);
        localStorage.setItem('authToken', userToken);
        localStorage.setItem('user', JSON.stringify(userData));
        
        console.log('‚úÖ useAuth: Login complete');
      } else {
        throw new Error(response.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ');
      }
    } catch (error: any) {
      console.error('‚ùå useAuth: Login failed:', error);
      clearAuth();
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
      if (error.error) {
        throw new Error(error.error);
      } else if (error.message) {
        throw new Error(error.message);
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    } finally {
      setIsLoading(false);
    }
  };

  const logout = async (): Promise<void> => {
    try {
      console.log('üîê useAuth: Logging out...');
      // –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã—Ö–æ–¥ (–µ—Å–ª–∏ —Ç–æ–∫–µ–Ω –µ—â–µ –≤–∞–ª–∏–¥–Ω—ã–π)
      if (token) {
        await authAPI.logout();
      }
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ (—Ç–æ–∫–µ–Ω –º–æ–≥ —É–∂–µ –±—ã—Ç—å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º)
      console.warn('‚ö†Ô∏è useAuth: Logout request failed:', error);
    } finally {
      clearAuth();
      console.log('‚úÖ useAuth: Logout complete');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  const validateToken = async (): Promise<boolean> => {
    if (!token) return false;
    
    try {
      console.log('üîç useAuth: Validating current token...');
      const response = await authAPI.me();
      if (response.success && response.data) {
        console.log('‚úÖ useAuth: Token is valid');
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        setUser(response.data);
        localStorage.setItem('user', JSON.stringify(response.data));
        return true;
      } else {
        console.warn('‚ùå useAuth: Token is invalid');
        clearAuth();
        return false;
      }
    } catch (error) {
      console.warn('‚ùå useAuth: Token validation failed:', error);
      clearAuth();
      return false;
    }
  };

  const value: AuthContextType = {
    user,
    token,
    login,
    logout,
    isLoading,
    validateToken, // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 