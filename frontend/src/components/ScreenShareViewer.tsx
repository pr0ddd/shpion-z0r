import React, { useEffect, useRef } from 'react';
import { Box, Paper, Typography } from '@mui/material';
import { Track } from 'livekit-client';
import { useServer } from '../contexts/ServerContext';

interface ScreenShareViewProps {
  track: Track;
  participantName: string;
}

const ScreenShareView: React.FC<ScreenShareViewProps> = ({ track, participantName }) => {
  const videoRef = useRef<HTMLVideoElement>(null);

  useEffect(() => {
    if (videoRef.current && track) {
      // –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –≤–∏–¥–µ–æ —Ç—Ä–µ–∫ –∫ —ç–ª–µ–º–µ–Ω—Ç—É video
      track.attach(videoRef.current);
      
      return () => {
        // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        track.detach();
      };
    }
  }, [track]);

  return (
    <Paper elevation={3} sx={{ p: 2, mb: 2 }}>
      <Typography variant="h6" gutterBottom>
        üñ•Ô∏è {participantName} –¥–µ–ª–∏—Ç—Å—è —ç–∫—Ä–∞–Ω–æ–º
      </Typography>
      
      <Typography variant="body2" color="text.secondary" gutterBottom>
        üìä –ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ HD ‚Üî Full HD ‚Üî SD –ø—Ä–∏ —Å–ª–æ–∂–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ö
      </Typography>
      
      <Box sx={{ 
        width: '100%', 
        backgroundColor: '#000',
        borderRadius: 1,
        overflow: 'hidden'
      }}>
        <video
          ref={videoRef}
          autoPlay
          playsInline
          muted={false}
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: '80vh', // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤—ã—Å–æ—Ç—É
            objectFit: 'contain',
            // –û—Ç–∫–ª—é—á–∞–µ–º —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–ª—è —á–µ—Ç–∫–æ—Å—Ç–∏
            imageRendering: 'pixelated'
          }}
        />
      </Box>
    </Paper>
  );
};

export const ScreenShareViewer: React.FC = () => {
  const { screenTracks } = useServer();

  // –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
  if (screenTracks.size === 0) {
    return null;
  }

  return (
    <Box sx={{ mt: 2 }}>
      <Typography variant="h5" gutterBottom>
        –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —ç–∫—Ä–∞–Ω–∞
      </Typography>
      
      <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: { xs: '1fr', md: 'repeat(2, 1fr)' } }}>
        {Array.from(screenTracks.entries()).map(([participantId, track]) => {
          // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ identity (—É–±–∏—Ä–∞–µ–º ID —á–∞—Å—Ç–∏)
          const participantName = participantId.split(':')[1] || participantId;
          
          return (
            <ScreenShareView 
              key={participantId}
              track={track} 
              participantName={participantName}
            />
          );
        })}
      </Box>
    </Box>
  );
}; 